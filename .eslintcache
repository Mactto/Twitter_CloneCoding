[{"C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\index.js":"1","C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\firebase.js":"2","C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\components\\App.js":"3","C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\components\\Router.js":"4","C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\routes\\Home.js":"5","C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\routes\\Auth.js":"6","C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\components\\Navigation.js":"7","C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\routes\\Profile.js":"8"},{"size":219,"mtime":1608443122648,"results":"9","hashOfConfig":"10"},{"size":662,"mtime":1608470218265,"results":"11","hashOfConfig":"10"},{"size":637,"mtime":1608470601113,"results":"12","hashOfConfig":"10"},{"size":997,"mtime":1608468039613,"results":"13","hashOfConfig":"10"},{"size":787,"mtime":1608470730455,"results":"14","hashOfConfig":"10"},{"size":2356,"mtime":1608467046168,"results":"15","hashOfConfig":"10"},{"size":430,"mtime":1608467523352,"results":"16","hashOfConfig":"10"},{"size":392,"mtime":1608468145632,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"tjjtqs",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\index.js",[],["38","39"],"C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\firebase.js",[],"C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\components\\App.js",[],"C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\components\\Router.js",["40"],"import React, {useState} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport Auth from '../routes/Auth';\r\nimport Home from '../routes/Home';\r\nimport Profile from '../routes/Profile';\r\nimport Navigation from './Navigation';\r\n\r\nconst AppRouter = ({isLoggedIn}) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation />}\r\n            <Switch>\r\n                {isLoggedIn ? \r\n                <>\r\n                    <Route exact path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n                    <Route exact path=\"/profile\">\r\n                        <Profile />\r\n                    </Route>\r\n                </>\r\n                :\r\n                (\r\n                    <>\r\n                    <Route exact path=\"/\">\r\n                        <Auth />\r\n                    </Route>\r\n                    </>\r\n                )}\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\routes\\Home.js",[],"C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\routes\\Auth.js",["41"],"import React, {useState} from \"react\";\r\nimport { authService, firebaseInstance } from \"../firebase\";\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onChange = (e) => {\r\n        const {target: {name, value}} = e;\r\n        if (name === \"email\") {\r\n            setEmail(e.currentTarget.value);\r\n        } else if (name === \"password\") {\r\n            setPassword(e.currentTarget.value);\r\n        }\r\n    }\r\n    const onSubmit = async(e) => {\r\n        e.preventDefault();\r\n        let data;\r\n        try {\r\n            if (newAccount) {\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            } else {\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            console.log(data);\r\n        } catch(err) {\r\n            setError(err.message);\r\n        }\r\n    }\r\n\r\n    const toggleAccount = () => setNewAccount(prev => !prev)\r\n    const onSocialClick = async (e) => {\r\n        const {target: {name}} = e;\r\n        let provider;\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n        console.log(data);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <input name=\"email\" type=\"text\" placeholder=\"Email\" required value={email} onChange={onChange}/>\r\n                <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange}/>\r\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n            </form>\r\n            <span onClick={toggleAccount}>{newAccount ? \"Log in\" : \"Create Account\"}</span>\r\n            <div>\r\n                <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\r\n                <button onClick={onSocialClick} name=\"github\">Continue with Github</button>\r\n            </div>\r\n            {error}\r\n        </div>   \r\n    )\r\n}\r\n\r\nexport default Auth;","C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\components\\Navigation.js",[],"C:\\Users\\mactt\\OneDrive\\바탕 화면\\Git\\Twitter_CloneCoding\\src\\routes\\Profile.js",["42"],"import React from \"react\";\r\nimport { authService } from \"../firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default () => {\r\n    const history = useHistory();\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    }\r\n    return (\r\n        <>\r\n            <button onClick={onLogOutClick}>Log Out</button>\r\n        </>\r\n    )\r\n}",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":16,"nodeType":"49","messageId":"50","endLine":1,"endColumn":24},{"ruleId":"47","severity":1,"message":"51","line":11,"column":31,"nodeType":"49","messageId":"50","endLine":11,"endColumn":36},{"ruleId":"52","severity":1,"message":"53","line":5,"column":1,"nodeType":"54","endLine":16,"endColumn":2},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'value' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]